!function(window){"use strict";function registerModule(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}var applicationModuleName="mean",service={applicationEnvironment:window.env,applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngSanitize","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","NgSwitchery","ui.select2","ngAudio","moment-picker","ngMap","ui.footable","angularUtils.directives.dirPagination","ngMaterial","ngMessages","material.svgAssetsCache"],registerModule:registerModule};window.ApplicationConfiguration=service}(window),function(app){"use strict";function bootstrapConfig($compileProvider,$locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor"),$compileProvider.debugInfoEnabled("production"!==app.applicationEnvironment)}function init(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[app.applicationModuleName])}angular.module(app.applicationModuleName,app.applicationModuleVendorDependencies),angular.module(app.applicationModuleName).config(bootstrapConfig),bootstrapConfig.$inject=["$compileProvider","$locationProvider","$httpProvider"],angular.element(document).ready(init)}(ApplicationConfiguration),ApplicationConfiguration.registerModule("areas",["core"]),ApplicationConfiguration.registerModule("areas.admin",["core.admin"]),ApplicationConfiguration.registerModule("areas.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("areas.routes",["ui.router","core.routes","areas.services"]),ApplicationConfiguration.registerModule("areas.services"),ApplicationConfiguration.registerModule("beacons",["core"]),ApplicationConfiguration.registerModule("beacons.admin",["core.admin"]),ApplicationConfiguration.registerModule("beacons.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("beacons.routes",["ui.router","core.routes","beacons.services"]),ApplicationConfiguration.registerModule("beacons.services"),ApplicationConfiguration.registerModule("bills",["core"]),function(app){"use strict";app.registerModule("core"),app.registerModule("core.routes",["ui.router"]),app.registerModule("core.admin",["core"]),app.registerModule("core.admin.routes",["ui.router"])}(ApplicationConfiguration),ApplicationConfiguration.registerModule("emails",["core"]),ApplicationConfiguration.registerModule("emails.admin",["core.admin"]),ApplicationConfiguration.registerModule("emails.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("emails.routes",["ui.router","core.routes","emails.services"]),ApplicationConfiguration.registerModule("emails.services"),ApplicationConfiguration.registerModule("events",["core"]),ApplicationConfiguration.registerModule("events.admin",["core.admin"]),ApplicationConfiguration.registerModule("events.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("events.routes",["ui.router","core.routes","events.services"]),ApplicationConfiguration.registerModule("events.services"),ApplicationConfiguration.registerModule("gains",["core"]),ApplicationConfiguration.registerModule("gains.admin",["core.admin"]),ApplicationConfiguration.registerModule("gains.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("gains.routes",["ui.router","core.routes","gains.services"]),ApplicationConfiguration.registerModule("gains.services"),ApplicationConfiguration.registerModule("licenses",["core"]),ApplicationConfiguration.registerModule("licenses.admin",["core.admin"]),ApplicationConfiguration.registerModule("licenses.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("licenses.routes",["ui.router","core.routes","licenses.services"]),ApplicationConfiguration.registerModule("licenses.services"),ApplicationConfiguration.registerModule("prices-beacons",["core"]),ApplicationConfiguration.registerModule("prices-beacons.admin",["core.admin"]),ApplicationConfiguration.registerModule("prices-beacons.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("prices-beacons.routes",["ui.router","core.routes","prices-beacons.services"]),ApplicationConfiguration.registerModule("prices-beacons.services"),ApplicationConfiguration.registerModule("prices-licenses",["core"]),ApplicationConfiguration.registerModule("prices-licenses.admin",["core.admin"]),ApplicationConfiguration.registerModule("prices-licenses.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("prices-licenses.routes",["ui.router","core.routes","prices-licenses.services"]),ApplicationConfiguration.registerModule("prices-licenses.services"),ApplicationConfiguration.registerModule("signals",["core"]),ApplicationConfiguration.registerModule("signals.admin",["core.admin"]),ApplicationConfiguration.registerModule("signals.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("signals.routes",["ui.router","core.routes","signals.services"]),ApplicationConfiguration.registerModule("signals.services"),ApplicationConfiguration.registerModule("stats",["core"]),ApplicationConfiguration.registerModule("stats.admin",["core.admin"]),ApplicationConfiguration.registerModule("stats.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("stats.routes",["ui.router","core.routes","stats.services"]),ApplicationConfiguration.registerModule("stats.services"),function(app){"use strict";app.registerModule("users"),app.registerModule("users.admin"),app.registerModule("users.admin.routes",["ui.router","core.routes","users.admin.services"]),app.registerModule("users.admin.services"),app.registerModule("users.routes",["ui.router","core.routes"]),app.registerModule("users.services")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("zones",["core"]),ApplicationConfiguration.registerModule("zones.admin",["core.admin"]),ApplicationConfiguration.registerModule("zones.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("zones.routes",["ui.router","core.routes","zones.services"]),ApplicationConfiguration.registerModule("zones.services"),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("areas",{abstract:!0,url:"/areas",template:"<ui-view/>"}).state("areas.list",{url:"",templateUrl:"modules/areas/client/views/list-areas.client.view.html",controller:"AreasListController",controllerAs:"vm",data:{pageTitle:"Liste Lieux"}}).state("areas.create",{url:"/create",templateUrl:"modules/areas/client/views/form-area.client.view.html",controller:"AreasController",controllerAs:"vm",resolve:{areaResolve:newArea}}).state("areas.edit",{url:"/:areaId/edit",templateUrl:"modules/areas/client/views/form-area.client.view.html",controller:"AreasController",controllerAs:"vm",resolve:{areaResolve:getArea}})}function getArea($stateParams,AreasService){return AreasService.get({areaId:$stateParams.areaId}).$promise}function newArea(AreasService){return new AreasService}angular.module("areas.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArea.$inject=["$stateParams","AreasService"],newArea.$inject=["AreasService"]}(),function(){"use strict";function AreasController($scope,$state,$window,ZonesService,area,Authentication,NgMap){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce lieu?")&&vm.area.$remove(function(){$state.go("areas.list")})}function save(isValid){function successCallback(res){$state.go("areas.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.area.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.areaForm"),!1)}var vm=this;vm.area=area,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,ZonesService.query(function(data){vm.zones=data}),vm.placeChanged=function(){vm.place=this.getPlace(),vm.area.placeLat=vm.place.geometry.location.lat(),vm.area.placeLng=vm.place.geometry.location.lng(),vm.map.setCenter(vm.place.geometry.location)},NgMap.getMap().then(function(map){vm.map=map})}angular.module("areas").controller("AreasController",AreasController),AreasController.$inject=["$scope","$state","$window","ZonesService","areaResolve","Authentication","NgMap"]}(),function(){"use strict";function AreasListController($scope,$filter,AreasService,Authentication){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.areas,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,vm.authentication=Authentication,AreasService.query(function(data){vm.areas=data,console.log(data),vm.buildPager()})}angular.module("areas").controller("AreasListController",AreasListController),AreasListController.$inject=["$scope","$filter","AreasService","Authentication"]}(),function(){"use strict";function AreasService($resource){function createOrUpdate(area){function onSuccess(area){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return area._id?area.$update(onSuccess,onError):area.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Area=$resource("api/areas/:areaId",{areaId:"@_id"},{update:{method:"PUT"}});return angular.extend(Area.prototype,{createOrUpdate:function(){var area=this;return createOrUpdate(area)}}),Area}angular.module("areas.services").factory("AreasService",AreasService),AreasService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Beacons",state:"admin.beacons.list"})}angular.module("beacons.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.beacons",{abstract:!0,url:"/beacons",template:"<ui-view/>"}).state("admin.beacons.list",{url:"",templateUrl:"modules/beacons/client/views/admin/list-beacons.client.view.html",controller:"BeaconsAdminListController",controllerAs:"vm",data:{roles:["admin"]},resolve:{beaconResolve:newBeacon}}).state("admin.beacons.create",{url:"/create",templateUrl:"modules/beacons/client/views/admin/form-beacon.client.view.html",controller:"BeaconsAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{beaconResolve:newBeacon}}).state("admin.beacons.edit",{url:"/:beaconId/edit",templateUrl:"modules/beacons/client/views/admin/form-beacon.client.view.html",controller:"BeaconsAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{beaconResolve:getBeacon}})}function getBeacon($stateParams,BeaconsService){return BeaconsService.get({beaconId:$stateParams.beaconId}).$promise}function newBeacon(BeaconsService){return new BeaconsService}angular.module("beacons.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getBeacon.$inject=["$stateParams","BeaconsService"],newBeacon.$inject=["BeaconsService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("beacons",{abstract:!0,url:"/beacons",template:"<ui-view/>"}).state("beacons.list",{url:"",templateUrl:"modules/beacons/client/views/list-beacons.client.view.html",controller:"BeaconsListController",controllerAs:"vm"}).state("beacons.order",{url:"/order",templateUrl:"modules/beacons/client/views/order-beacons.client.view.html",controller:"BeaconsOrderController",controllerAs:"vm",resolve:{beaconResolve:newBeacon}}).state("beacons.order-checkout",{url:"/order/:beaconId",templateUrl:"modules/beacons/client/views/order-checkout-beacons.client.view.html",controller:"BeaconsOrderController",controllerAs:"vm",resolve:{beaconResolve:getBeacon}}).state("beacons.view",{url:"/:beaconId",templateUrl:"modules/beacons/client/views/view-beacon.client.view.html",controller:"BeaconsController",controllerAs:"vm",resolve:{beaconResolve:getBeacon}}).state("beacons.edit",{url:"/:beaconId/edit",templateUrl:"modules/beacons/client/views/form-beacon.client.view.html",controller:"BeaconsController",controllerAs:"vm",resolve:{beaconResolve:getBeacon}})}function getBeacon($stateParams,BeaconsService){return BeaconsService.get({beaconId:$stateParams.beaconId}).$promise}function newBeacon(BeaconsService){return new BeaconsService}angular.module("beacons.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getBeacon.$inject=["$stateParams","BeaconsService"],newBeacon.$inject=["BeaconsService"]}(),function(){"use strict";function BeaconsAdminController($scope,$state,$window,beacon,Authentication){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce beacon?")&&vm.beacon.$remove(function(){$state.go("admin.beacons.list")})}function save(isValid){function successCallback(res){$state.go("admin.beacons.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.beacon.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.beaconForm"),!1)}var vm=this;vm.beacon=beacon,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("beacons.admin").controller("BeaconsAdminController",BeaconsAdminController),BeaconsAdminController.$inject=["$scope","$state","$window","beaconResolve","Authentication"]}(),function(){"use strict";function BeaconsAdminListController($scope,$window,$state,$filter,beacon,Authentication,BeaconsService){function disabled(data){var date=data.date,mode=data.mode;return"day"===mode&&(0===date.getDay()||6===date.getDay())}function getDayClass(data){var date=data.date,mode=data.mode;if("day"===mode)for(var dayToCheck=new Date(date).setHours(0,0,0,0),i=0;i<$scope.events.length;i++){var currentDay=new Date($scope.events[i].date).setHours(0,0,0,0);if(dayToCheck===currentDay)return $scope.events[i].status}return""}function buildPager(){vm.pagedItems=[],vm.itemsPerPage=8,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.beacons,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce beacon?")&&vm.beacon.$remove(function(){$state.go("admin.beacons.list")})}function save(isValid){function successCallback(res){$state.go("admin.beacons.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.beacon.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.beaconForm"),!1)}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,vm.beacon=beacon,$scope.today=function(){$scope.dt=new Date},$scope.today(),$scope.clear=function(){$scope.dt=null},$scope.inlineOptions={customClass:getDayClass,minDate:new Date,showWeeks:"false"},$scope.dateOptions={dateDisabled:disabled,formatYear:"yy",maxDate:new Date(2020,5,22),minDate:new Date,startingDay:1},$scope.toggleMin=function(){$scope.inlineOptions.minDate=$scope.inlineOptions.minDate?null:new Date,$scope.dateOptions.minDate=$scope.inlineOptions.minDate},$scope.toggleMin(),$scope.open1=function(){$scope.popup1.opened=!0},$scope.open2=function(){$scope.popup2.opened=!0},$scope.setDate=function(year,month,day){$scope.dt=new Date(year,month,day)},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.altInputFormats=["M!/d!/yyyy"],$scope.popup1={opened:!1},$scope.popup2={opened:!1};var tomorrow=new Date;tomorrow.setDate(tomorrow.getDate()+1);var afterTomorrow=new Date;afterTomorrow.setDate(tomorrow.getDate()+1),$scope.events=[{date:tomorrow,status:"full"},{date:afterTomorrow,status:"partially"}],vm.authentication=Authentication,BeaconsService.query(function(data){vm.beacons=data,vm.buildPager()}),vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("beacons.admin").controller("BeaconsAdminListController",BeaconsAdminListController),BeaconsAdminListController.$inject=["$scope","$window","$state","$filter","beaconResolve","Authentication","BeaconsService"]}(),function(){"use strict";function BeaconsController($scope,$state,$window,beacon,Authentication){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce beacon?")&&vm.beacon.$remove(function(){$state.go("beacons.list")})}function save(isValid){function successCallback(res){$state.go("beacons.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.beacon.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.beaconForm"),!1)}var vm=this;vm.beacon=beacon,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("beacons").controller("BeaconsController",BeaconsController),BeaconsController.$inject=["$scope","$state","$window","beaconResolve","Authentication"]}(),function(){"use strict";function BeaconsListController($scope,$filter,BeaconsService,Authentication){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.beacons,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.authentication=Authentication,vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,BeaconsService.query(function(data){vm.beacons=data,vm.buildPager()})}angular.module("beacons").controller("BeaconsListController",BeaconsListController),BeaconsListController.$inject=["$scope","$filter","BeaconsService","Authentication"]}(),function(){"use strict";function BeaconsOrderController($scope,$filter,$state,$window,beacon,BeaconsService,BeaconsPricesService,Authentication){function save(isValid){function successCallback(res){$state.go("beacons.order")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.beacon.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.beaconForm"),!1)}var vm=this;vm.beacon=beacon,console.log(beacon),vm.authentication=Authentication,vm.error=null,vm.form={},vm.save=save,BeaconsService.query(function(datas){vm.beacons=datas,console.log(datas)}),BeaconsPricesService.query(function(data){vm.beaconPrices=data})}angular.module("beacons").controller("BeaconsOrderController",BeaconsOrderController),BeaconsOrderController.$inject=["$scope","$filter","$state","$window","beaconResolve","BeaconsService","BeaconsPricesService","Authentication"]}(),function(){"use strict";function BeaconsService($resource){function createOrUpdate(beacon){function onSuccess(beacon){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return beacon._id?beacon.$update(onSuccess,onError):beacon.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Beacon=$resource("api/beacons/:beaconId",{beaconId:"@_id"},{update:{method:"PUT"}});return angular.extend(Beacon.prototype,{createOrUpdate:function(){var beacon=this;return createOrUpdate(beacon)}}),Beacon}angular.module("beacons.services").factory("BeaconsService",BeaconsService),BeaconsService.$inject=["$resource"]}(),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("bills",{url:"/bills",templateUrl:"modules/bills/client/views/bills.client.view.html"}).state("bill",{url:"/bill",templateUrl:"modules/bills/client/views/bill.client.view.html",data:{ignoreState:!0}})}]),function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}angular.module("core.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}angular.module("core.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function routeFilter($rootScope,$state,Authentication){function stateChangeStart(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){for(var allowed=!1,i=0,roles=toState.data.roles;i<roles.length;i++)if("guest"===roles[i]||Authentication.user&&void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(roles[i])!==-1){allowed=!0;break}allowed||(event.preventDefault(),null!==Authentication.user&&"object"==typeof Authentication.user?$state.transitionTo("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}function stateChangeSuccess(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)}function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").run(routeFilter),routeFilter.$inject=["$rootScope","$state","Authentication"]}(),function(){"use strict";function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.rule(function($injector,$location){var path=$location.path(),hasTrailingSlash=path.length>1&&"/"===path[path.length-1];if(hasTrailingSlash){var newPath=path.substr(0,path.length-1);$location.replace().path(newPath)}}),$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html",controller:"LicensesListController",controllerAs:"vm"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0,pageTitle:"Not-Found"}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0,pageTitle:"Bad-Request"}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0,pageTitle:"Forbidden"}}).state("licenses.create",{url:"/create",templateUrl:"modules/licenses/client/views/form-license.client.view.html",controller:"LicensesController",controllerAs:"vm",resolve:{licenseResolve:newLicense}})}function newLicense(LicensesService){return new LicensesService}angular.module("core.routes").config(routeConfig),routeConfig.$inject=["$stateProvider","$urlRouterProvider"],newLicense.$inject=["LicensesService"]}(),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),function(){"use strict";function HomeController(){}angular.module("core").controller("HomeController",HomeController)}(),angular.module("core").directive("sideNavigation",["$timeout",function($timeout){return{restrict:"A",link:function(scope,element){scope.$watch("authentication.user",function(){$timeout(function(){element.metisMenu()})})}}}]).directive("minimalizaSidebar",["$timeout",function($timeout){return{restrict:"A",template:'<a class="navbar-minimalize minimalize-styl-2 btn btn-primary " href="" ng-click="minimalize()"><i class="fa fa-bars"></i></a>',controller:["$scope","$element",function($scope,$element){$scope.minimalize=function(){angular.element("body").toggleClass("mini-navbar"),!angular.element("body").hasClass("mini-navbar")||angular.element("body").hasClass("body-small")?(angular.element("#side-menu").hide(),$timeout(function(){angular.element("#side-menu").fadeIn(400)},200)):angular.element("#side-menu").removeAttr("style")}}]}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),function(){"use strict";function authInterceptor($q,$injector,Authentication){function responseError(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}var service={responseError:responseError};return service}angular.module("core").factory("authInterceptor",authInterceptor),authInterceptor.$inject=["$q","$injector","Authentication"]}(),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Emails",state:"admin.emails.list"})}angular.module("emails.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.emails",{abstract:!0,url:"/emails",template:"<ui-view/>"}).state("admin.emails.list",{url:"",templateUrl:"modules/emails/client/views/admin/list-emails.client.view.html",controller:"EmailsAdminListController",controllerAs:"vm",data:{roles:["admin"]},resolve:{emailResolve:newEmail}}).state("admin.emails.create",{url:"/create",templateUrl:"modules/emails/client/views/admin/form-email.client.view.html",controller:"EmailsAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{emailResolve:newEmail}}).state("admin.emails.edit",{url:"/:emailId/edit",templateUrl:"modules/emails/client/views/admin/form-email.client.view.html",controller:"EmailsAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{emailResolve:getEmail}})}function getEmail($stateParams,EmailsService){return EmailsService.get({emailId:$stateParams.emailId}).$promise}function newEmail(EmailsService){return new EmailsService}angular.module("emails.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getEmail.$inject=["$stateParams","EmailsService"],newEmail.$inject=["EmailsService"]}(),function(){"use strict";function EmailsAdminController($scope,$state,$window,email,Authentication){
function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer cet email?")&&vm.email.$remove(function(){$state.go("admin.emails.list")})}function save(isValid){function successCallback(res){$state.go("admin.emails.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.email.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.emailForm"),!1)}var vm=this;vm.email=email,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("emails.admin").controller("EmailsAdminController",EmailsAdminController),EmailsAdminController.$inject=["$scope","$state","$window","emailResolve","Authentication"]}(),function(){"use strict";function EmailsAdminListController($scope,$filter,$window,$state,email,Authentication,EmailsService){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer cet email?")&&vm.email.$remove(function(){$state.go("admin.emails.list")})}function save(isValid){function successCallback(res){$state.go("admin.emails.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.email.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.emailForm"),!1)}function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.emails,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.email=email,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,EmailsService.query(function(data){vm.emails=data,vm.buildPager()})}angular.module("emails.admin").controller("EmailsAdminListController",EmailsAdminListController),EmailsAdminListController.$inject=["$scope","$filter","$window","$state","emailResolve","Authentication","EmailsService"]}(),function(){"use strict";function EmailsService($resource){function createOrUpdate(email){function onSuccess(email){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return email._id?email.$update(onSuccess,onError):email.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Email=$resource("api/emails/:emailId",{emailId:"@_id"},{update:{method:"PUT"}});return angular.extend(Email.prototype,{createOrUpdate:function(){var email=this;return createOrUpdate(email)}}),Email}angular.module("emails.services").factory("EmailsService",EmailsService),EmailsService.$inject=["$resource"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("events",{abstract:!0,url:"/events",template:"<ui-view/>"}).state("events.list",{url:"",templateUrl:"modules/events/client/views/list-events.client.view.html",controller:"EventsListController",controllerAs:"vm",resolve:{evtResolve:newEvent}}).state("events.create",{url:"/create",templateUrl:"modules/events/client/views/form-event.client.view.html",controller:"EventsController",controllerAs:"vm",resolve:{evtResolve:newEvent}}).state("events.edit",{url:"/:eventId/edit",templateUrl:"modules/events/client/views/form-event.client.view.html",controller:"EventsController",controllerAs:"vm",resolve:{evtResolve:getEvent}})}function getEvent($stateParams,EventsService){return EventsService.get({eventId:$stateParams.eventId}).$promise}function newEvent(EventsService){return new EventsService}angular.module("events.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getEvent.$inject=["$stateParams","EventsService"],newEvent.$inject=["EventsService"]}(),function(){"use strict";function EventsController($scope,$state,$window,$timeout,evt,Authentication,FileUploader,NgMap){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer cet Ã©vÃ©nement?")&&vm.evt.$remove(function(){$state.go("events.list")})}function save(isValid){function successCallback(res){$state.go("events.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.evt.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.evtForm"),!1)}var vm=this;vm.evt=evt,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.evt.eventStartDate&&(vm.evt.eventStartDate=moment.max(moment(evt.eventStartDate),moment(evt.eventStartDate)).format("MM/DD/YYYY")),vm.evt.eventEndDate&&(vm.evt.eventEndDate=moment.max(moment(evt.eventEndDate),moment(evt.eventEndDate)).format("MM/DD/YYYY")),vm.placeChanged=function(){vm.place=this.getPlace(),vm.evt.eventLat=vm.place.geometry.location.lat(),vm.evt.eventLng=vm.place.geometry.location.lng(),vm.map.setCenter(vm.place.geometry.location)},NgMap.getMap().then(function(map){vm.map=map}),$scope.imageURL=vm.evt.eventPicture,$scope.uploader=new FileUploader({url:"api/events/picture",alias:"newEventPicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.evt=response,console.log(response),$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadEventPicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=vm.evt.eventPicture}}angular.module("events",["moment-picker"]).controller("EventsController",EventsController).config(["momentPickerProvider",function(momentPickerProvider){momentPickerProvider.options({locale:"fr",format:"MM/DD/YY",minView:"decade",maxView:"minute",startView:"year",autoclose:!0,today:!0,keyboard:!0,leftArrow:"&larr;",rightArrow:"&rarr;",yearsFormat:"YYYY",monthsFormat:"MMM",daysFormat:"DD",hoursFormat:"HH:[00]",secondsFormat:"ss",minutesStep:5,secondsStep:1})}]),EventsController.$inject=["$scope","$state","$window","$timeout","evtResolve","Authentication","FileUploader","NgMap"]}(),function(){"use strict";function EventsListController($scope,$filter,$window,evt,$state,EventsService,Authentication){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.evts,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer cet Ã©vÃ©nement?")&&vm.evt.$remove(function(){$state.go("events.create")})}var vm=this;vm.evt=evt,vm.authentication=Authentication,vm.remove=remove,vm.error=null,vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,EventsService.query(function(data){vm.evts=data,vm.buildPager()})}angular.module("events").controller("EventsListController",EventsListController),EventsListController.$inject=["$scope","$filter","$window","$state","evtResolve","EventsService","Authentication"]}(),function(){"use strict";function icheck($timeout){return{restrict:"A",require:"ngModel",link:function($scope,element,$attrs,ngModel){return $timeout(function(){var value;return value=$attrs.value,$scope.$watch($attrs.ngModel,function(newValue){$(element).iCheck("update")}),$(element).iCheck({checkboxClass:"icheckbox_flat-green",radioClass:"iradio_square-green"}).on("ifChanged",function(event){if("checkbox"===$(element).attr("type")&&$attrs.ngModel&&$scope.$apply(function(){return ngModel.$setViewValue(event.target.checked)}),"radio"===$(element).attr("type")&&$attrs.ngModel)return $scope.$apply(function(){return ngModel.$setViewValue(value)})})})}}}icheck.$inject=["$timeout"],angular.module("events").directive("icheck",icheck)}(),function(){"use strict";function EventsService($resource){function createOrUpdate(evt){function onSuccess(evt){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return evt._id?evt.$update(onSuccess,onError):evt.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Evt=$resource("api/events/:eventId",{eventId:"@_id"},{update:{method:"PUT"}});return angular.extend(Evt.prototype,{createOrUpdate:function(){var evt=this;return createOrUpdate(evt)}}),Evt}angular.module("events.services").factory("EventsService",EventsService),EventsService.$inject=["$resource"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("gains",{abstract:!0,url:"/gains",template:"<ui-view/>"}).state("gains.list",{url:"",templateUrl:"modules/gains/client/views/list-gains.client.view.html",controller:"GainsListController",controllerAs:"vm",resolve:{gainResolve:newGain}}).state("gains.create",{url:"/create",templateUrl:"modules/gains/client/views/form-gain.client.view.html",controller:"GainsController",controllerAs:"vm",resolve:{gainResolve:newGain}}).state("gains.edit",{url:"/:gainId/edit",templateUrl:"modules/gains/client/views/form-gain.client.view.html",controller:"GainsController",controllerAs:"vm",resolve:{gainResolve:getGain}})}function getGain($stateParams,GainsService){return GainsService.get({gainId:$stateParams.gainId}).$promise}function newGain(GainsService){return new GainsService}angular.module("gains.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getGain.$inject=["$stateParams","GainsService"],newGain.$inject=["GainsService"]}(),function(){"use strict";function GainsController($scope,$state,$window,$timeout,gain,Authentication,FileUploader){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce contenu?")&&vm.gain.$remove(function(){$state.go("gains.list")})}function save(isValid){function successCallback(res){$state.go("gains.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.gain.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.gainForm"),!1)}var vm=this;vm.gain=gain,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.gain.gainStartDate&&(vm.gain.gainStartDate=moment.max(moment(gain.gainStartDate),moment(gain.gainStartDate)).format("MM/DD/YYYY")),vm.gain.gainEndDate&&(vm.gain.gainEndDate=moment.max(moment(gain.gainEndDate),moment(gain.gainEndDate)).format("MM/DD/YYYY")),$scope.imageURL=vm.gain.gainPicture,console.log($scope.imageURL),$scope.uploader=new FileUploader({url:"api/gains/picture",alias:"newGainPicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.gain=response,console.log(response),$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadGainPicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=vm.gain.gainPicture}}angular.module("gains",["moment-picker"]).controller("GainsController",GainsController).config(["momentPickerProvider",function(momentPickerProvider){momentPickerProvider.options({locale:"fr",format:"MM/DD/YY",minView:"decade",maxView:"minute",startView:"year",autoclose:!0,today:!0,keyboard:!0,leftArrow:"&larr;",rightArrow:"&rarr;",yearsFormat:"YYYY",monthsFormat:"MMM",daysFormat:"DD",hoursFormat:"HH:[00]",secondsFormat:"ss",minutesStep:5,secondsStep:1})}]),GainsController.$inject=["$scope","$state","$window","$timeout","gainResolve","Authentication","FileUploader"]}(),function(){"use strict";function GainsListController($scope,$filter,$window,gain,$state,GainsService,Authentication){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.gains,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce contenu?")&&vm.gain.$remove(function(){$state.go("gains.create")})}var vm=this;vm.gain=gain,vm.authentication=Authentication,vm.remove=remove,vm.error=null,vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,GainsService.query(function(data){vm.gains=data,vm.buildPager()})}angular.module("gains").controller("GainsListController",GainsListController),GainsListController.$inject=["$scope","$filter","$window","$state","gainResolve","GainsService","Authentication"]}(),function(){"use strict";function icheck($timeout){return{restrict:"A",require:"ngModel",link:function($scope,element,$attrs,ngModel){return $timeout(function(){var value;return value=$attrs.value,$scope.$watch($attrs.ngModel,function(newValue){$(element).iCheck("update")}),$(element).iCheck({checkboxClass:"icheckbox_flat-green",radioClass:"iradio_square-green"}).on("ifChanged",function(event){if("checkbox"===$(element).attr("type")&&$attrs.ngModel&&$scope.$apply(function(){return ngModel.$setViewValue(event.target.checked)}),"radio"===$(element).attr("type")&&$attrs.ngModel)return $scope.$apply(function(){return ngModel.$setViewValue(value)})})})}}}icheck.$inject=["$timeout"],angular.module("gains").directive("icheck",icheck)}(),function(){"use strict";function GainsService($resource){function createOrUpdate(gain){function onSuccess(gain){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return gain._id?gain.$update(onSuccess,onError):gain.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Gain=$resource("api/gains/:gainId",{gainId:"@_id"},{update:{method:"PUT"}});return angular.extend(Gain.prototype,{createOrUpdate:function(){var gain=this;return createOrUpdate(gain)}}),Gain}angular.module("gains.services").factory("GainsService",GainsService),GainsService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Licenses",state:"admin.licenses.list"})}angular.module("licenses.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.licenses",{abstract:!0,url:"/licenses",template:"<ui-view/>"}).state("admin.licenses.list",{url:"",templateUrl:"modules/licenses/client/views/admin/list-licenses.client.view.html",controller:"LicensesAdminListController",controllerAs:"vm",data:{roles:["admin"]}}).state("admin.licenses.create",{url:"/create",templateUrl:"modules/licenses/client/views/admin/form-license.client.view.html",controller:"LicensesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{licenseResolve:newLicense}}).state("admin.licenses.edit",{url:"/:licenseId/edit",templateUrl:"modules/licenses/client/views/admin/form-license.client.view.html",controller:"LicensesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{licenseResolve:getLicense}})}function getLicense($stateParams,LicensesService){return LicensesService.get({licenseId:$stateParams.licenseId}).$promise}function newLicense(LicensesService){return new LicensesService}angular.module("licenses.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getLicense.$inject=["$stateParams","LicensesService"],newLicense.$inject=["LicensesService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("licenses",{abstract:!0,url:"/licenses",template:"<ui-view/>"}).state("licenses.list",{url:"",templateUrl:"modules/licenses/client/views/list-licenses.client.view.html",controller:"LicensesListController",controllerAs:"vm",data:{pageTitle:"Liste Licences"}}).state("licenses.free-license",{url:"/free-license",templateUrl:"modules/licenses/client/views/form-free-license.client.view.html",controller:"LicensesController",controllerAs:"vm",resolve:{licenseResolve:newLicense}}).state("licenses.order",{url:"/order",templateUrl:"modules/licenses/client/views/order-licenses.client.view.html",controller:"LicensesListController",controllerAs:"vm"}).state("licenses.order-checkout",{url:"/order/checkout",templateUrl:"modules/licenses/client/views/order-checkout-licenses.client.view.html",controller:"LicensesListController",controllerAs:"vm"}).state("licenses.view",{url:"/:licenseId",templateUrl:"modules/licenses/client/views/view-license.client.view.html",controller:"LicensesController",controllerAs:"vm",resolve:{licenseResolve:getLicense}}).state("licenses.edit",{url:"/:licenseId/edit",templateUrl:"modules/licenses/client/views/form-license.client.view.html",controller:"LicensesController",controllerAs:"vm",resolve:{licenseResolve:getLicense}})}function getLicense($stateParams,LicensesService){return LicensesService.get({licenseId:$stateParams.licenseId}).$promise}function newLicense(LicensesService){return new LicensesService}angular.module("licenses.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getLicense.$inject=["$stateParams","LicensesService"],newLicense.$inject=["LicensesService"]}(),function(){"use strict";function LicensesAdminController($scope,$state,$window,license,Authentication){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer cette licence?")&&vm.license.$remove(function(){$state.go("admin.licenses.list")})}function save(isValid){function successCallback(res){$state.go("admin.licenses.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.license.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.licenseForm"),!1)}var vm=this;vm.license=license,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("licenses.admin").controller("LicensesAdminController",LicensesAdminController),LicensesAdminController.$inject=["$scope","$state","$window","licenseResolve","Authentication"]}(),function(){"use strict";function LicensesAdminListController($scope,$filter,LicensesService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.licenses,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,LicensesService.query(function(data){vm.licenses=data,vm.buildPager()})}angular.module("licenses.admin").controller("LicensesAdminListController",LicensesAdminListController),LicensesAdminListController.$inject=["$scope","$filter","LicensesService"]}(),function(){"use strict";function LicensesController($scope,$state,$window,license,LicensesService,AreasService,ZonesService,Authentication,ngAudio){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer cette licence?")&&vm.license.$remove(function(){$state.go("licenses.list")})}function save(isValid){function successCallback(res){$state.go("licenses.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.license.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.licenseForm"),!1)}var vm=this;vm.license=license,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,LicensesService.query(function(datas){vm.licences=datas;for(var x1,tObj=[],xObj=[],i=0;i<datas.length;i++)tObj.push(datas[i].user._id);for(var j=0;j<tObj.length;j++)x1=tObj[j]===vm.authentication.user._id?1:0,xObj.push(x1);vm.hasLicense=xObj.includes(1),console.log(vm.hasLicense)}),ZonesService.query(function(data){vm.zones=data}),AreasService.query(function(data){vm.areas=data}),$scope.audio=ngAudio.load("modules/licenses/client/sounds/V3-C1-AB586.wav"),$scope.audio.volume=.1}angular.module("licenses").controller("LicensesController",LicensesController,["ngAudio"]),LicensesController.$inject=["$scope","$state","$window","licenseResolve","LicensesService","AreasService","ZonesService","Authentication","ngAudio"]}(),function(){"use strict";function LicensesListController($scope,$filter,LicensesService,Authentication){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.licenses,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,vm.authentication=Authentication,LicensesService.query(function(data){vm.licenses=data,vm.buildPager();for(var x1,tObj=[],xObj=[],i=0;i<data.length;i++)tObj.push(data[i].user._id);for(var j=0;j<tObj.length;j++)x1=tObj[j]===vm.authentication.user._id?1:0,xObj.push(x1);vm.hasLicense=xObj.includes(1),console.log(vm.hasLicense)})}angular.module("licenses").controller("LicensesListController",LicensesListController),LicensesListController.$inject=["$scope","$filter","LicensesService","Authentication"]}(),function(){"use strict";function LicensesService($resource){function createOrUpdate(license){function onSuccess(license){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return license._id?license.$update(onSuccess,onError):license.$save(onSuccess,onError)}function handleError(error){console.log(error)}var License=$resource("api/licenses/:licenseId",{licenseId:"@_id"},{update:{method:"PUT"}});return angular.extend(License.prototype,{createOrUpdate:function(){var license=this;return createOrUpdate(license)}}),License}angular.module("licenses.services").factory("LicensesService",LicensesService),LicensesService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Prix Beacons",state:"admin.prices-beacons.list"})}angular.module("prices-beacons.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.prices-beacons",{abstract:!0,url:"/prices/beacons",template:"<ui-view/>"}).state("admin.prices-beacons.list",{url:"",templateUrl:"modules/prices-beacons/client/views/admin/list-prices-beacons.client.view.html",controller:"BeaconsPricesAdminListController",controllerAs:"vm",data:{roles:["admin"]},resolve:{beaconPriceResolve:newBeaconPrice}}).state("admin.prices-beacons.create",{url:"/create",templateUrl:"modules/prices-beacons/client/views/admin/form-price-beacon.client.view.html",controller:"BeaconsPricesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{beaconPriceResolve:newBeaconPrice}}).state("admin.prices-beacons.edit",{url:"/:beaconPriceId/edit",templateUrl:"modules/prices-beacons/client/views/admin/form-price-beacon.client.view.html",controller:"BeaconsPricesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{beaconPriceResolve:getBeaconPrice}})}function getBeaconPrice($stateParams,BeaconsPricesService){return BeaconsPricesService.get({beaconPriceId:$stateParams.beaconPriceId}).$promise}function newBeaconPrice(BeaconsPricesService){return new BeaconsPricesService}angular.module("prices-beacons.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getBeaconPrice.$inject=["$stateParams","BeaconsPricesService"],newBeaconPrice.$inject=["BeaconsPricesService"]}(),function(){"use strict";function BeaconsPricesAdminListController($scope,$window,$state,$filter,beaconPrice,Authentication,BeaconsPricesService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.beaconPrice,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce prix?")&&vm.beaconPrice.$remove(function(){$state.go("admin.prices-beacons.list")})}function save(isValid){function successCallback(res){$state.go("admin.prices-beacons.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.beaconPrice.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.beaconPriceForm"),!1)}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,vm.beaconPrice=beaconPrice,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,BeaconsPricesService.query(function(data){vm.beaconPrice=data,vm.buildPager()})}angular.module("prices-beacons.admin").controller("BeaconsPricesAdminListController",BeaconsPricesAdminListController),BeaconsPricesAdminListController.$inject=["$scope","$window","$state","$filter","beaconPriceResolve","Authentication","BeaconsPricesService"]}(),function(){"use strict";function BeaconsPricesAdminController($scope,$state,$window,beaconPrice,Authentication){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce prix?")&&vm.beaconPrice.$remove(function(){$state.go("admin.prices-beacons.list")})}function save(isValid){function successCallback(res){$state.go("admin.prices-beacons.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.beaconPrice.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.beaconPriceForm"),!1)}var vm=this;vm.beaconPrice=beaconPrice,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("prices-beacons.admin").controller("BeaconsPricesAdminController",BeaconsPricesAdminController),BeaconsPricesAdminController.$inject=["$scope","$state","$window","beaconPriceResolve","Authentication"]}(),function(){"use strict";function BeaconsPricesService($resource){function createOrUpdate(beaconPrice){function onSuccess(beaconPrice){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return beaconPrice._id?beaconPrice.$update(onSuccess,onError):beaconPrice.$save(onSuccess,onError)}function handleError(error){console.log(error)}var BeaconPrice=$resource("api/prices/beacons/:beaconPriceId",{beaconPriceId:"@_id"},{update:{method:"PUT"}});return angular.extend(BeaconPrice.prototype,{createOrUpdate:function(){var beaconPrice=this;return createOrUpdate(beaconPrice)}}),BeaconPrice}angular.module("prices-beacons.services").factory("BeaconsPricesService",BeaconsPricesService),BeaconsPricesService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Prix Licences",state:"admin.prices-licenses.list"})}angular.module("prices-licenses.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.prices-licenses",{abstract:!0,url:"/prices/licenses",template:"<ui-view/>"}).state("admin.prices-licenses.list",{url:"",templateUrl:"modules/prices-licenses/client/views/admin/list-prices-licenses.client.view.html",controller:"LicensesPricesAdminListController",controllerAs:"vm",data:{roles:["admin"]},resolve:{licensePriceResolve:newLicensePrice}}).state("admin.prices-licenses.create",{url:"/create",templateUrl:"modules/prices-licenses/client/views/admin/form-price-license.client.view.html",controller:"LicensesPricesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{licensePriceResolve:newLicensePrice}}).state("admin.prices-licenses.edit",{url:"/:licensePriceId/edit",templateUrl:"modules/prices-licenses/client/views/admin/form-price-license.client.view.html",controller:"LicensesPricesAdminController",controllerAs:"vm",data:{roles:["admin"]},resolve:{licensePriceResolve:getLicensePrice}})}function getLicensePrice($stateParams,LicensesPricesService){return LicensesPricesService.get({licensePriceId:$stateParams.licensePriceId}).$promise}function newLicensePrice(LicensesPricesService){return new LicensesPricesService}angular.module("prices-licenses.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getLicensePrice.$inject=["$stateParams","LicensesPricesService"],newLicensePrice.$inject=["LicensesPricesService"]}(),function(){"use strict";function LicensesPricesAdminListController($scope,$window,$state,$filter,licensePrice,Authentication,LicensesPricesService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.licensePrice,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce prix?")&&vm.licensePrice.$remove(function(){$state.go("admin.prices-licenses.list")})}function save(isValid){function successCallback(res){$state.go("admin.prices-licenses.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.licensePrice.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.licensePriceForm"),!1)}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,vm.licensePrice=licensePrice,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,LicensesPricesService.query(function(data){vm.licensePrice=data,vm.buildPager()})}angular.module("prices-licenses.admin").controller("LicensesPricesAdminListController",LicensesPricesAdminListController),LicensesPricesAdminListController.$inject=["$scope","$window","$state","$filter","licensePriceResolve","Authentication","LicensesPricesService"]}(),function(){"use strict";function LicensesPricesAdminController($scope,$state,$window,licensePrice,Authentication){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce prix?")&&vm.licensePrice.$remove(function(){$state.go("admin.prices-licenses.list")})}function save(isValid){
function successCallback(res){$state.go("admin.prices-licenses.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.licensePrice.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.licensePriceForm"),!1)}var vm=this;vm.licensePrice=licensePrice,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("prices-licenses.admin").controller("LicensesPricesAdminController",LicensesPricesAdminController),LicensesPricesAdminController.$inject=["$scope","$state","$window","licensePriceResolve","Authentication"]}(),function(){"use strict";function LicensesPricesService($resource){function createOrUpdate(licensePrice){function onSuccess(licensePrice){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return licensePrice._id?licensePrice.$update(onSuccess,onError):licensePrice.$save(onSuccess,onError)}function handleError(error){console.log(error)}var LicensePrice=$resource("api/prices/licenses/:licensePriceId",{licensePriceId:"@_id"},{update:{method:"PUT"}});return angular.extend(LicensePrice.prototype,{createOrUpdate:function(){var licensePrice=this;return createOrUpdate(licensePrice)}}),LicensePrice}angular.module("prices-licenses.services").factory("LicensesPricesService",LicensesPricesService),LicensesPricesService.$inject=["$resource"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("signals",{abstract:!0,url:"/signals",template:"<ui-view/>"}).state("signals.list",{url:"",templateUrl:"modules/signals/client/views/list-signals.client.view.html",controller:"SignalsListController",controllerAs:"vm"}).state("signals.create",{url:"/create",templateUrl:"modules/signals/client/views/form-signal.client.view.html",controller:"SignalsController",controllerAs:"vm",resolve:{signalResolve:newSignal}}).state("signals.view",{url:"/:signalId",templateUrl:"modules/signals/client/views/view-signal.client.view.html",controller:"SignalsController",controllerAs:"vm",resolve:{signalResolve:getSignal}}).state("signals.edit",{url:"/:signalId/edit",templateUrl:"modules/signals/client/views/form-signal.client.view.html",controller:"SignalsController",controllerAs:"vm",resolve:{signalResolve:getSignal}})}function getSignal($stateParams,SignalsService){return SignalsService.get({signalId:$stateParams.signalId}).$promise}function newSignal(SignalsService){return new SignalsService}angular.module("signals.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getSignal.$inject=["$stateParams","SignalsService"],newSignal.$inject=["SignalsService"]}(),function(){"use strict";function SignalsListController($scope,$filter,SignalsService,Authentication){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.signals,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,vm.authentication=Authentication,SignalsService.query(function(data){vm.signals=data,vm.buildPager()})}angular.module("signals").controller("SignalsListController",SignalsListController),SignalsListController.$inject=["$scope","$filter","SignalsService","Authentication"]}(),function(){"use strict";function SignalsController($scope,$state,$window,signal,SignalsService,Authentication,ngAudio){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce signal?")&&vm.signal.$remove(function(){$state.go("signals.list")})}function save(isValid){function successCallback(res){$state.go("signals.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.signal.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.signalForm"),!1)}var vm=this;vm.signal=signal,console.log(vm.signal),vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,SignalsService.query(function(datas){vm.signals=datas,console.log(datas)}),$scope.audio=ngAudio.load("modules/licenses/client/sounds/V3-C1-AB586.wav"),$scope.audio.volume=.1}angular.module("signals").controller("SignalsController",SignalsController,["ngAudio"]),SignalsController.$inject=["$scope","$state","$window","signalResolve","SignalsService","Authentication","ngAudio"]}(),function(){"use strict";function SignalsService($resource){function createOrUpdate(signal){function onSuccess(signal){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return signal._id?signal.$update(onSuccess,onError):signal.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Signal=$resource("api/signals/:signalId",{signalId:"@_id"},{update:{method:"PUT"}});return angular.extend(Signal.prototype,{createOrUpdate:function(){var signal=this;return createOrUpdate(signal)}}),Signal}angular.module("signals.services").factory("SignalsService",SignalsService),SignalsService.$inject=["$resource"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("stats",{abstract:!0,url:"/stats",template:"<ui-view/>"}).state("stats.list",{url:"",templateUrl:"modules/stats/client/views/list-stats.client.view.html",controller:"StatsListController",controllerAs:"vm",data:{pageTitle:"Liste Stats"}}).state("stats.create",{url:"/create",templateUrl:"modules/stats/client/views/form-stat.client.view.html",controller:"StatsController",controllerAs:"vm",resolve:{statResolve:newStat}}).state("stats.edit",{url:"/:statId/edit",templateUrl:"modules/stats/client/views/form-stat.client.view.html",controller:"StatsController",controllerAs:"vm",resolve:{statResolve:getStat}})}function getStat($stateParams,StatsService){return StatsService.get({statId:$stateParams.statId}).$promise}function newStat(StatsService){return new StatsService}angular.module("stats.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getStat.$inject=["$stateParams","StatsService"],newStat.$inject=["StatsService"]}(),function(){"use strict";function StatsListController($scope,$filter,StatsService,Authentication){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.stats,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,vm.authentication=Authentication,StatsService.query(function(data){vm.stats=data,vm.buildPager()})}angular.module("stats").controller("StatsListController",StatsListController),StatsListController.$inject=["$scope","$filter","StatsService","Authentication"]}(),function(){"use strict";function StatsController($scope,$state,$window,stat,Authentication){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer ce log?")&&vm.stat.$remove(function(){$state.go("stats.list")})}function save(isValid){function successCallback(res){$state.go("stats.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.stat.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.statForm"),!1)}var vm=this;vm.stat=stat,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("stats").controller("StatsController",StatsController),StatsController.$inject=["$scope","$state","$window","statResolve","Authentication"]}(),function(){"use strict";function StatsService($resource){function createOrUpdate(stat){function onSuccess(stat){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return stat._id?stat.$update(onSuccess,onError):stat.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Stat=$resource("api/stats/:statId",{statId:"@_id"},{update:{method:"PUT"}});return angular.extend(Stat.prototype,{createOrUpdate:function(){var stat=this;return createOrUpdate(stat)}}),Stat}angular.module("stats.services").factory("StatsService",StatsService),StatsService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Clients",state:"admin.users"})}angular.module("users.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",controllerAs:"vm",data:{pageTitle:"Users List"}}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}}).state("admin.user-create",{url:"/users/create",templateUrl:"modules/licenses/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{licenseResolve:newUser}})}function getUser($stateParams,AdminService){return AdminService.get({userId:$stateParams.userId}).$promise}function newUser(AdminService){return new AdminService}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getUser.$inject=["$stateParams","AdminService"],newUser.$inject=["AdminService"]}(),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",controller:"SettingsController",controllerAs:"vm",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html",controller:"EditProfileController",controllerAs:"vm",data:{pageTitle:"Settings"}}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",data:{pageTitle:"Settings password"}}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html",controller:"SocialAccountsController",controllerAs:"vm"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signup"}}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signin"}}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password forgot"}}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password reset form"}})}angular.module("users.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function UserListController($scope,$filter,AdminService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.users,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,AdminService.query(function(data){vm.users=data,vm.buildPager()})}angular.module("users.admin").controller("UserListController",UserListController),UserListController.$inject=["$scope","$filter","AdminService"]}(),function(){"use strict";function UserController($scope,$state,$window,Authentication,user){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1)):vm.user.$remove(function(){$state.go("admin.users")}))}function update(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=vm.user;user.$update(function(){$state.go("admin.users")},function(errorResponse){vm.error=errorResponse.data.message})}function save(isValid){function successCallback(res){$state.go("admin.users")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.user.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.userForm"),!1)}function isContextUserSelf(){return vm.user.username===vm.authentication.user.username}var vm=this;vm.authentication=Authentication,vm.user=user,vm.form={},vm.remove=remove,vm.update=update,vm.save=save,vm.isContextUserSelf=isContextUserSelf}angular.module("users.admin").controller("UserController",UserController),UserController.$inject=["$scope","$state","$window","Authentication","userResolve"]}(),function(){"use strict";function AuthenticationController($scope,$state,UsersService,$location,$window,Authentication,PasswordValidator){function signup(isValid){return vm.error=null,isValid?void UsersService.userSignup(vm.credentials).then(onUserSignupSuccess).catch(onUserSignupError):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function signin(isValid){return vm.error=null,isValid?void UsersService.userSignin(vm.credentials).then(onUserSigninSuccess).catch(onUserSigninError):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function callOauthProvider(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}function onUserSignupSuccess(response){vm.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}function onUserSignupError(response){vm.error=response.data.message}function onUserSigninSuccess(response){vm.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}function onUserSigninError(response){vm.error=response.data.message}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.signin=signin,vm.callOauthProvider=callOauthProvider,vm.error=$location.search().err,vm.authentication.user&&$location.path("/")}angular.module("users").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$state","UsersService","$location","$window","Authentication","PasswordValidator"]}(),function(){"use strict";function PasswordController($scope,$stateParams,UsersService,$location,Authentication,PasswordValidator){function askForPasswordReset(isValid){return vm.success=vm.error=null,isValid?void UsersService.requestPasswordReset(vm.credentials).then(onRequestPasswordResetSuccess).catch(onRequestPasswordResetError):($scope.$broadcast("show-errors-check-validity","vm.forgotPasswordForm"),!1)}function resetUserPassword(isValid){return vm.success=vm.error=null,isValid?void UsersService.resetPassword($stateParams.token,vm.passwordDetails).then(onResetPasswordSuccess).catch(onResetPasswordError):($scope.$broadcast("show-errors-check-validity","vm.resetPasswordForm"),!1)}function onRequestPasswordResetSuccess(response){vm.credentials=null,vm.success=response.message}function onRequestPasswordResetError(response){vm.credentials=null,vm.error=response.data.message}function onResetPasswordSuccess(response){vm.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}function onResetPasswordError(response){vm.error=response.data.message}var vm=this;vm.resetUserPassword=resetUserPassword,vm.askForPasswordReset=askForPasswordReset,vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.authentication.user&&$location.path("/")}angular.module("users").controller("PasswordController",PasswordController),PasswordController.$inject=["$scope","$stateParams","UsersService","$location","Authentication","PasswordValidator"]}(),function(){"use strict";function ChangePasswordController($scope,$http,Authentication,UsersService,PasswordValidator){function changeUserPassword(isValid){return vm.success=vm.error=null,isValid?void UsersService.changePassword(vm.passwordDetails).then(onChangePasswordSuccess).catch(onChangePasswordError):($scope.$broadcast("show-errors-check-validity","vm.passwordForm"),!1)}function onChangePasswordSuccess(response){$scope.$broadcast("show-errors-reset","vm.passwordForm"),vm.success=!0,vm.passwordDetails=null}function onChangePasswordError(response){vm.error=response.data.message}var vm=this;vm.user=Authentication.user,vm.changeUserPassword=changeUserPassword,vm.getPopoverMsg=PasswordValidator.getPopoverMsg}angular.module("users").controller("ChangePasswordController",ChangePasswordController),ChangePasswordController.$inject=["$scope","$http","Authentication","UsersService","PasswordValidator"]}(),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),function(){"use strict";function EditProfileController($scope,$http,$location,UsersService,Authentication){function updateUserProfile(isValid){if(vm.success=vm.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=new UsersService(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,Authentication.user=response},function(response){vm.error=response.data.message})}var vm=this;vm.user=Authentication.user,vm.updateUserProfile=updateUserProfile}angular.module("users").controller("EditProfileController",EditProfileController),EditProfileController.$inject=["$scope","$http","$location","UsersService","Authentication"]}(),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),function(){"use strict";function SettingsController($scope,Authentication){var vm=this;vm.user=Authentication.user}angular.module("users").controller("SettingsController",SettingsController),SettingsController.$inject=["$scope","Authentication"]}(),function(){"use strict";function passwordValidator(PasswordValidator){function link(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.getPopoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.getPopoverMsg="",scope.passwordErrors=[],status=!0)}return status}}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("passwordValidator",passwordValidator),passwordValidator.$inject=["PasswordValidator"]}(),function(){"use strict";function passwordVerify(){function link(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}var directive={require:"ngModel",scope:{passwordVerify:"="},link:link};return directive}angular.module("users").directive("passwordVerify",passwordVerify)}(),function(){"use strict";function lowercase(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("lowercase",lowercase)}(),function(){"use strict";function Authentication($window){var auth={user:$window.user};return auth}angular.module("users.services").factory("Authentication",Authentication),Authentication.$inject=["$window"]}(),function(){"use strict";function PasswordValidator($window){function getResult(password){var result=owaspPasswordStrengthTest.test(password);return result}function getPopoverMsg(){var popoverMsg="Please enter a passphrase or password with "+owaspPasswordStrengthTest.configs.minLength+" or more characters, numbers, lowercase, uppercase, and special characters.";return popoverMsg}var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest,service={getResult:getResult,getPopoverMsg:getPopoverMsg};return service}angular.module("users.services").factory("PasswordValidator",PasswordValidator),PasswordValidator.$inject=["$window"]}(),function(){"use strict";function UsersService($resource){var Users=$resource("api/users",{},{update:{method:"PUT"},updatePassword:{method:"POST",url:"api/users/password"},deleteProvider:{method:"DELETE",url:"api/users/accounts",params:{provider:"@provider"}},sendPasswordResetToken:{method:"POST",url:"api/auth/forgot"},resetPasswordWithToken:{method:"POST",url:"api/auth/reset/:token"},signup:{method:"POST",url:"api/auth/signup"},signin:{method:"POST",url:"api/auth/signin"}});return angular.extend(Users,{changePassword:function(passwordDetails){return this.updatePassword(passwordDetails).$promise},removeSocialAccount:function(provider){return this.deleteProvider({provider:provider}).$promise},requestPasswordReset:function(credentials){return this.sendPasswordResetToken(credentials).$promise},resetPassword:function(token,passwordDetails){return this.resetPasswordWithToken({token:token},passwordDetails).$promise},userSignup:function(credentials){return this.signup(credentials).$promise},userSignin:function(credentials){return this.signin(credentials).$promise}}),Users}function AdminService($resource){function createOrUpdate(user){function onSuccess(user){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return user._id?user.$update(onSuccess,onError):user.$save(onSuccess,onError)}function handleError(error){console.log(error)}var User=$resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}});return angular.extend(User.prototype,{createOrUpdate:function(){var user=this;return createOrUpdate(user)}}),User}angular.module("users.services").factory("UsersService",UsersService),UsersService.$inject=["$resource"],angular.module("users.admin.services").factory("AdminService",AdminService),AdminService.$inject=["$resource"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("zones",{abstract:!0,url:"/zones",template:"<ui-view/>"}).state("zones.list",{url:"",templateUrl:"modules/zones/client/views/list-zones.client.view.html",controller:"ZonesListController",controllerAs:"vm",data:{pageTitle:"Liste Zones"}}).state("zones.create",{url:"/create",templateUrl:"modules/zones/client/views/form-zone.client.view.html",controller:"ZonesController",controllerAs:"vm",resolve:{zoneResolve:newZone}}).state("zones.edit",{url:"/:zoneId/edit",templateUrl:"modules/zones/client/views/form-zone.client.view.html",controller:"ZonesController",controllerAs:"vm",resolve:{zoneResolve:getZone}})}function getZone($stateParams,ZonesService){return ZonesService.get({zoneId:$stateParams.zoneId}).$promise}function newZone(ZonesService){return new ZonesService}angular.module("zones.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getZone.$inject=["$stateParams","ZonesService"],newZone.$inject=["ZonesService"]}(),function(){"use strict";function ZonesListController($scope,$filter,ZonesService,Authentication){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=10,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.zones,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,vm.authentication=Authentication,ZonesService.query(function(data){vm.zones=data,vm.buildPager()})}angular.module("zones").controller("ZonesListController",ZonesListController),ZonesListController.$inject=["$scope","$filter","ZonesService","Authentication"]}(),function(){"use strict";function ZonesController($scope,$state,$window,AreasService,zone,Authentication){function remove(){$window.confirm("ÃŠtes-vous sur de vouloir supprimer cette zone?")&&vm.zone.$remove(function(){$state.go("zones.list")})}function save(isValid){function successCallback(res){$state.go("zones.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void vm.zone.createOrUpdate().then(successCallback).catch(errorCallback):($scope.$broadcast("show-errors-check-validity","vm.form.zoneForm"),!1)}var vm=this;vm.zone=zone,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,AreasService.query(function(data){vm.areas=data})}angular.module("zones").controller("ZonesController",ZonesController),ZonesController.$inject=["$scope","$state","$window","AreasService","zoneResolve","Authentication"]}(),function(){"use strict";function ZonesService($resource){function createOrUpdate(zone){function onSuccess(zone){}function onError(errorResponse){var error=errorResponse.data;handleError(error)}return zone._id?zone.$update(onSuccess,onError):zone.$save(onSuccess,onError)}function handleError(error){console.log(error)}var Zone=$resource("api/zones/:zoneId",{zoneId:"@_id"},{update:{method:"PUT"}});return angular.extend(Zone.prototype,{createOrUpdate:function(){var zone=this;return createOrUpdate(zone)}}),Zone}angular.module("zones.services").factory("ZonesService",ZonesService),ZonesService.$inject=["$resource"]}();